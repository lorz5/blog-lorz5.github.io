[{"title":"我的补/追番计划","date":"2022-03-23T13:17:01.000Z","url":"/2022/03/23/%E6%88%91%E7%9A%84%E8%A1%A5%E8%BF%BD%E7%95%AA%E8%AE%A1%E5%88%92/","tags":[["私人","/tags/%E7%A7%81%E4%BA%BA/"],["生活记录","/tags/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"]],"categories":[["个人","/categories/%E4%B8%AA%E4%BA%BA/"]],"content":" 我的补/追番计划 Little 简介： 《Little Busters! 》是日本[Visual Art’s]( Art’s)公司旗下的游戏品牌Key社发售的恋爱冒险游戏，本作以青春和友情为主题。Key开发本作品的消息于2005年年末发表，当初并未定下对象年龄，后来发表是全年龄对象游戏。于2007年6月1日公开试玩版，同年7月27日发售。电击G’smagazine（MediaWorks）于2006年3月号开始连载本作的四格漫画，由笹桐ゆうや绘画。 作品讲述主人公直枝理树自幼父母双亡，当他深陷孤单与绝望的时候，一个名为「Little Busters」的四人组（枣恭介、枣铃、井之原真人、宫泽谦吾）拯救了他。他们把理树带出了阴暗的世界，不停的尝试各种新活动。理树与他们在一起，忘记了寂寞和痛苦。时间飞逝，他们进入了同一所高中，现在已经是二年级生了。即使面临升学和求职的压力，今年他们还是围绕恭介的提案，在棒球场上尽情挥洒着青春…… "},{"title":"漫画记录","date":"2022-03-06T15:00:57.000Z","url":"/2022/03/06/%E6%BC%AB%E7%94%BB%E8%AE%B0%E5%BD%95/","tags":[["私人","/tags/%E7%A7%81%E4%BA%BA/"],["生活记录","/tags/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"]],"categories":[["个人","/categories/%E4%B8%AA%E4%BA%BA/"]],"content":" 心血来潮的漫画记录，包括正在追的和看完的 我想将真正的实力隐藏到极限 别名： 真の実力はギリギリまで隠していようと思う 作者： 龟小屋サト 猫夜叉 地域： 日本 状态： 连载中 题材： 奇幻 轻小说 分类： 少年漫画 最新收录： 第15话 2022-03-13 已追进度 第15话 2022-03-13 个人观感 希腊神话背景下的龙傲天男主（妹子不错 简介： ​ 在一个与神缔结契约的世界，优诺在一个有名的骑士家出生了。但是因为他生来便拥有过于强大的力量以至于操控力量都已经竭尽全力了。所以不知不觉之中他被称为是无能，他不以为然并对此感到满足，但是在某天他与一个无名女神相遇了。 我的诅咒吸血姬 作者： 金井千咲贵 地域： 日本 状态： 连载中 题材： 冒险 奇幻 分类： 少年漫画 最新收录： 番外① 2022-03-19 已追进度 番外① 2022-04-03 个人观感 类似momo的题材，恋爱漫画的味道 简介： ​ 维系你我的是这被诅咒的爱恋，被鲜血所渲染的吸血鬼故事！ 关于我被魔王大人召唤了但语言不通无法交流这件事 作者： うたしま 地域： 日本 状态： 连载中 题材： 冒险 萌系 奇幻 分类： 少年漫画 最新收录： 第29话 2022-03-25 已追进度 第29话 2022-04-03 个人观感 萌即是正义！ 简介： ​ 假如，我能召唤异世界的魔王……事实却是，我，被魔王召唤去了异世界？为什么是魔王是萝莉？交流也是问题啊！ "},{"title":"爬虫记录之雷速网篮球比分抓取","date":"2022-02-23T13:45:43.000Z","url":"/2022/02/23/%E7%88%AC%E8%99%AB%E8%AE%B0%E5%BD%95%E4%B9%8B%E9%9B%B7%E9%80%9F%E7%BD%91%E7%AF%AE%E7%90%83%E6%AF%94%E5%88%86%E6%8A%93%E5%8F%96/","tags":[["爬虫","/tags/%E7%88%AC%E8%99%AB/"]],"categories":[["undefined",""]],"content":" 一次爬虫记录 一：定位数据来源的思路过程1、首先通过谷歌浏览器F12抓包，对队伍名称、比分等关键字进行搜索 发现比分等关键数据并不是明文，不能直接获取，但可以直接从页面中获取到队伍信息，标记； 猜测： 1、 比分数据是加密字串 2、 比分数据通过websocket获取 2、再对页面中缺少的部分数据，即比赛状态进行关键字搜索 定位到layout_before.js，观察发现其中进行了js混淆，肉眼观察有点困难，对这个JS打断点，通过断点调试，成功得到篮球比赛状态的来源，为一个数组，标记。 此外，NCAA联赛的比赛状态需要单独处理 3、页面原始数据到这里卡住，转换思路，从websocket入手（1）全局搜索“onMessage”定位到ls-ws-base-min.js，对这个js文件进行断点调试失败。 è 猜测： 这个js没有被调用 （2）转换思路，全局搜索“message”定位到score.js，观察其中的字段与websocket中的基本一致，可以确定线索就在这个混淆用的数组中 （3）顺着混淆思路，全局搜索_x50215[75]，得到唯一的出现地方，再对这个地方进行断点调试，观察数据，找到了处理websocket数据的方法入口 4、对websocket数据进行断点调试的过程中，页面的比赛数据已经加载完毕，通过调试观察全局数据，发现一个名为base64_的单独变量存储着大量数据，推测为原始数据加密字段，标记 5、调试过程中，发现base64_与websocket收到的数据都调用同一个方法 è 猜测： 页面原始数据与websocket中的加密数据为同一个加密方法，即也是调用同一个解密方法 二：数据解密思路（websocket）1、从roott方法入手，可知t为加密字段，从堆栈反推得知另一个参数为websocket接受到的对应的另一个字段 在调用roott之前会对websocket接受到的数据进行一个json解析 2、参数已全，进行下一个函数，观察分析，得知这步是遍历加密字串，对每个单独字符进行一个偏移量的处理 3、进入pushmsg函数，进行分析 三：数据解密思路（原始字串）原始字串的核心解密与步骤二中websocket的解密一致，只是还缺少一个偏移量 1、依然从roott方法入手，从堆栈反推，得知偏移量存放在STATIC_CONFIG[“KST”]中 2、全局搜索混淆数组，得到定义偏移量的JS "},{"title":"爬虫记录之Espn网篮球文字直播抓取","date":"2022-02-23T13:45:43.000Z","url":"/2022/02/23/%E7%88%AC%E8%99%AB%E8%AE%B0%E5%BD%95%E4%B9%8BEspn%E7%BD%91%E7%AF%AE%E7%90%83%E6%96%87%E5%AD%97%E7%9B%B4%E6%92%AD%E6%8A%93%E5%8F%96/","tags":[["爬虫","/tags/%E7%88%AC%E8%99%AB/"]],"categories":[["undefined",""]],"content":" 定位数据来源的思路过程以及websocket解密过程 一、定位数据来源的思路过程1、首先打开进行中的比赛的页面，通过谷歌浏览器F12抓包，对文字直播的信息进行全局搜索，直接就可以找到初始化的文字直播数据，记录 地址为“” + 联赛标识 + “/playbyplay/_/gameId/”+ 比赛的id 2、已经获取到单个比赛的数据，开始回推单个联赛的数据来源，点击联赛名称，页面回到联赛的首页，对上方的队伍名称进行全局搜索，观察到疑似目标的数据 3、把这部分数据提取出来对比，确定是目标数据，记录 所有比赛数据来源地址为：“” + 联赛标识 4、开始回推所有联赛信息数据来源，从页面上看，可以从这个下拉框中得到所有联赛的地址。全局搜索联赛名称，对比得到疑似数据 5、对比各联赛地址与疑似数据，确定数据正确 二：websocket数据获取1、首先是websocket的地址，通过多次刷新对比得知连接websocket的地址是不断变化的，对地址进行全局搜索，得到地址的数据来源 2、观察数据，可知数据是加密的 3、从启动器堆栈跳转，跟踪websocket线索，得到数据处理的入口 4、打断点调试，记录解密流程 "},{"title":"优秀博客记录","date":"2022-02-03T18:15:53.000Z","url":"/2022/02/04/%E4%BC%98%E7%A7%80%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/","tags":[["网站记录","/tags/%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95/"]],"categories":[["个人","/categories/%E4%B8%AA%E4%BA%BA/"]],"content":" 优秀博客记录，方便个人查找 一、爬虫 网址 备注  【爬虫进行时】手机客户端app爬虫抓包（Fiddler） "},{"title":"学校资源记录（包含毕设）","date":"2022-02-03T18:03:21.000Z","url":"/2022/02/04/%E5%AD%A6%E6%A0%A1%E8%B5%84%E6%BA%90%E8%AE%B0%E5%BD%95%EF%BC%88%E5%8C%85%E5%90%AB%E6%AF%95%E8%AE%BE%EF%BC%89/","tags":[["网站记录","/tags/%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95/"]],"categories":[["个人","/categories/%E4%B8%AA%E4%BA%BA/"]],"content":" 此文章用于备份记录学校网站以及毕设相关资源，方便个人查找 一、学校网站 站名 网址 备注 教务系统（选课）  vpn  实践活动信息管理 10.0.1.79/ 毕设管理系统  爱写作  大一英语写作系统 肇庆学院专业分布  二、证书官网 站名 网址 备注 中国教育考试网  全国计算机等级考试  蓝桥杯大赛  三、求职 站名 网址 备注 牛客网  应届生求职网  "},{"title":"基于C#的爬虫模板","date":"2022-01-17T07:41:06.000Z","url":"/2022/01/17/%E5%9F%BA%E4%BA%8ECSharp%E7%9A%84%E7%88%AC%E8%99%AB%E6%A8%A1%E6%9D%BF/","tags":[["工具","/tags/%E5%B7%A5%E5%85%B7/"]],"categories":[["爬虫","/categories/%E7%88%AC%E8%99%AB/"]],"content":" 基于C#的爬虫模板 一、utils.HtmlUtil 二、utils.StringUtil 三、utils.TimeUtil 四、common.DateBase 五、utils.GzipHelper"},{"title":"个人用的一些网站记录之日常工具篇","date":"2022-01-16T11:24:08.000Z","url":"/2022/01/16/%E4%B8%AA%E4%BA%BA%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95%E4%B9%8B%E5%B7%A5%E5%85%B7%E7%AF%87/","tags":[["网站记录","/tags/%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95/"],["工具","/tags/%E5%B7%A5%E5%85%B7/"]],"categories":[["个人","/categories/%E4%B8%AA%E4%BA%BA/"]],"content":" 此文章用于备份记录一些偏门网站，方便个人查找 导航 站名 网址 备注 优聚集  一个开始  创造狮  设计类 工具集合 站名 网址 备注 码工具  站长工具 爱给网  素材  游戏素材 ProcessOn  流程图 MindLine  思维导图 文叔叔文件  云传文件  PDF二维码生成 算法 站名 网址 备注 VisuAlgo  算法可视化 力扣  蓝桥杯练习系统  浙大PTA  华东师范大学  洛谷刷题  电子书 站名 网址 备注 小白盘  鸠摩搜索  来搜一下  全国图书馆参考  "},{"title":"个人用的一些网站记录之宅篇","date":"2022-01-15T19:44:00.000Z","url":"/2022/01/16/%E4%B8%AA%E4%BA%BA%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95%E4%B9%8B%E5%AE%85%E7%AF%87/","tags":[["网站记录","/tags/%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95/"],["二次元","/tags/%E4%BA%8C%E6%AC%A1%E5%85%83/"]],"categories":[["个人","/categories/%E4%B8%AA%E4%BA%BA/"]],"content":" 此文章用于备份记录一些偏门网站，方便个人查找 番剧 站名 网址 备注 风车动漫  zzzfun  nico   S站   星星动漫  异世界动漫  异世界动漫  动漫花园-rip  番剧资源下载 漫画 站名 网址 备注 搜漫  轻小说 站名 网址 备注 迷糊  客户端 论坛 站名 网址 备注 绯月  终点  gal 琉璃神社  呲哩呲哩  各种站点集合导航 Animex动漫社  动漫资讯 YU  新番表 萌次元  二次元情报站 ACG爱动漫  二次元情报站 Swordart  刀剑神域情报站（含小说） E站  |  写真类 e次元  二三次元论坛 ACGN里世界  论坛 图站 站名 网址 备注 Pixivic  第三方P站 pixivel  第三方P站 麦克图床  我的图床 saucenao  以图找图 ascii2d  以图找图 Lolicon API  瑟图接口 资源 站名 网址 备注 漫音社  无损音乐 KissACG  MAD素材 真白萌  轻小说 轻之国度  轻小说 幻天领域  Gal Gal领域  Gal ACG次元  地址发布页 ACG次元  登录页 爱恋  BT下载 动漫花园  BT下载 动漫花园  站主资源分享 Csze BT种子  BT下载 miobt  BT下载 bt天堂  电影 磁力宝  BT下载 "},{"title":"个人用的一些网站记录之编程工具篇","date":"2022-01-15T19:44:00.000Z","url":"/2022/01/16/%E4%B8%AA%E4%BA%BA%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95%E4%B9%8B%E6%A1%86%E6%9E%B6%E7%AF%87/","tags":[["网站记录","/tags/%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95/"],["框架","/tags/%E6%A1%86%E6%9E%B6/"]],"categories":[["个人","/categories/%E4%B8%AA%E4%BA%BA/"]],"content":" 此文章用于备份记录一些有关编程的偏门网站，方便个人查找 包含的内容如下： == 开发相关的网站 == 对眼的主题 == JAVA、C/C++ 相关框架与工具 == 前端框架、相关导航与工具 爬虫常用工具 站名 网址 备注 regex101  正则测试 进制转换  进制转换 在线ascii转换  编码字符查询 格式化  在线cookie字符串转json 格式化  JSON格式化（去转义） 格式化  代码格式化 菜鸟工具  XML在线格式化 OKtools  在线加密解密，aes等 猿人学工具  猿人学爬虫工具集合 一、开发可能会用到的 站名 网址 备注 git简明指南   临时CDN图片获取  CSS颜色选取  图片转ico格式 改图宝  在线改图  图片转格式，WEPB 二、博客的主题文档 站名 网址 备注 Hexo  本博客  Hexo-Theme-Yun  |  云游君 三、JAVA 站名 网址 备注 mybatis 3  黑马JAVA  maven仓库  hutool  一些工具类 小木人  jar包下载 BootSchool  banner生成器 若依管理系统  后台框架 四、前端 站名 网址 备注 阿里巴巴图标库  Font Awesome  字体图标库 Semantic UI  Javaex  |   网站开发常用资料工具整理 MarkMaker  字体图标在线生成  jquery CDN Toptal  背景图 五、C / C++ 站名 网址 备注 easyX  easy2D  C++游戏框架 六、一些小玩意 站名 网址 备注 simple-bot  基于java的qq机器人 "},{"title":"存储过程","date":"2021-12-14T02:47:49.000Z","url":"/2021/12/14/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/","tags":[["sql server","/tags/sql-server/"]],"categories":[["数据库","/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"]],"content":" 基于Sql Server的存储过程语法 一、是什么？有什么优点？Sql Server的存储过程是一个被命名的存储在服务器上的Transacation-Sql语句集合,是封装重复性工作的一种方法,它支持用户声明的变量、条件执行和其他强大的编程功能。 存储过程相对于其他的数据库访问方法有以下的优点： (1)重复使用。存储过程可以重复使用，从而可以减少数据库开发人员的工作量。 (2)提高性能。存储过程在创建的时候就进行了编译，将来使用的时候不用再重新编译。一般的SQL语句每执行一次就需要编译一次，所以使用存储过程提高了效率。 (3)减少网络流量。存储过程位于服务器上，调用的时候只需要传递存储过程的名称以及参数就可以了，因此降低了网络传输的数据量。 (4)安全性。参数化的存储过程可以防止SQL注入式的攻击，而且可以将Grant、Deny以及Revoke权限应用于存储过程。 二、存储过程的分类（1）用户定义的存储过程 用户定义的存储过程又分为Transaction-SQL和CLR两种类型。 Transaction-SQL存储过程 是指保存的Transaction-SQL语句集合，可以接受和返回用户提供的参数 CLR存储过程是指对.Net Framework公共语言运行时(CLR)方法的引用，可以接受和返回用户提供的参数。他们在.Net Framework程序集中是作为类的公共静态方法实现的 （2）扩展存储过程 （3）系统存储过程 三、例子（1）建表 （2）插入数据 （3）修改与删除数据 （4 | 1）定义存储过程：查询所有数据 （5 | 2）定义存储过程：根据条件用户名查询用户信息 （6 | 3）定义存储过程：根据内置参数查询用户信息 （7 | 4）定义存储过程：根据用户名查询是否存在这个用户信息 （8 | 5）定义存储过程：内部设定局部变量用户名来查询用户信息 （9 | 6）定义存储过程：根据学号查询用户名 （10 | 7）定义存储过程：插入用户信息 （11 | 8）定义存储过程：根据用户名来删除对应的用户信息 （12 | 9）定义存储过程：根据用户学号来查询他的平均分 （13 | 10）定义存储过程：根据用户学号来联合查询用户信息和课程信息 （14 | 11）定义存储过程：判断学号是否存在，不存在，插入用户信息，返回消息；存在，返回信息 （15 | 12） 定义存储过程：查询当前用户的平均成绩与总的平均成绩之间的关系decimal(10,2)中的“2”表示小数部分的位数，如果插入的值未指定小数部分或者小数部分不足两位则会自动补到2位小数，若插入的值小数部分超过了2为则会发生截断，截取前2位小数。 “10”指的是整数部分加小数部分的总长度，也即插入的数字整数部分不能超过“10-2”位，否则不能成功插入，会报超出范围的错误。 "},{"title":"Http协议","date":"2021-11-22T01:21:00.000Z","url":"/2021/11/22/Http%E5%8D%8F%E8%AE%AE/","tags":[["计算机网络","/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"],["协议","/tags/%E5%8D%8F%E8%AE%AE/"]],"categories":[["爬虫","/categories/%E7%88%AC%E8%99%AB/"]],"content":" 从Http到Https 前情提要 万维网：是一个大规模、联机式的信息储藏/资料空间，是无数个网络站点和网页的集合。 定位方式：统一资源定位符URL——唯一标识——&gt;资源（文字、视频、音频） URL不区分大小写 一、在TCP/IP协议栈中的位置HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。如下图所示： 默认HTTP的端口号为80，HTTPS的端口号为443。 二、定义HTTP是Hyper Text Transfer Protocol（超文本传输协议）的缩写。 是用于从WWW服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。 HTTP是一个应用层协议，由请求和响应构成 HTTP是一个标准的客户端服务器C/S模型。 HTTP是一个无状态的协议。 三、工作流程一次HTTP操作称为一个事务，其工作过程可分为四步： 1）首先客户机与服务器需要建立连接。只要单击某个超级链接或者输入某个网址，HTTP的工作开始。 2）建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。 3）服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。 4）客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。 三次握手 第一次握手：客户端将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给服务器端，客户端进入SYN_SENT状态，等待服务器端确认。 第二次握手：服务器端收到数据包后由标志位SYN=1知道客户端请求建立连接，服务器端将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端以确认连接请求，服务器端进入SYN_RCVD状态。 第三次握手：客户端收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务器端，服务器端检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端和服务器端进入ESTABLISHED状态，完成三次握手，随后客户端与服务器端之间可以开始传输数据了。 四、报文结构HTTP报文分为请求报文和响应报文 （1）请求报文 例如，访问百度，请求头如下： 其中，Connection表示连接方式为：keep-alive持久连接 （2）响应报文 例如，访问百度，响应头如下： （3）通用字段（通用头）通用头域包含请求和响应消息都支持的头域，通用头域包含Cache-Control、 Connection、Date、Pragma、Transfer-Encoding、Upgrade、Via。对通用头域的扩展要求通讯双方都支持此扩展，如果存在不支持的通用头域，一般将会作为实体头域处理。下面简单介绍几个在UPnP消息中使用的通用头域。 Cache-Control：指定请求和响应遵循的缓存机制 Public：指示响应可被任何缓存区缓存； Private：指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效； cache：指示请求或响应消息不能缓存； no-store：用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存； max-age：指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应； max-fresh：指示客户机可以接收响应时间小于当前时间加上指定时间的响应； max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。 Date：表示消息发送的时间，时间的描述格式由rfc822定义 RFC 822是电子邮件的标准格式 例如，Date：Thu, 28 Oct 2021 06:18:41 GMT 描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。 Pragma：用来包含实现特定的指令 最常用的是Pragma:no-cache。在HTTP/1.1协议中，它的含义和Cache- Control:no-cache相同。 Connection：表示连接状态 close： 对于请求：告诉WEB服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了。 对于响应：连接已经关闭。 keepalive： 对于请求：告诉WEB服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求。 对于响应：连接保持着，在等待本次连接的后续请求 五、Http与Https（1）定义Https是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 HTTPS协议的主要作用可以分为两种： 建立一个信息安全通道，来保证数据传输的安全； 确认网站的真实性。 （2）区别1、https协议需要到CA申请证书，一般免费证书较少，因而需要一定费用。 2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。 3、http和https使用的是完全不同的连接方式，用的端口也不一样，http是80，https是443。 4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。 无状态：服务器不会在服务器端存储有关客户端会话的任何状态 （3）Https的工作原理 客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。 （1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。 （2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。 （3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。 （4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。 （5）Web服务器利用自己的私钥解密出会话密钥。 （6）Web服务器利用会话密钥加密与客户端之间的通信。 "},{"title":"C#中的json","date":"2021-11-18T08:57:23.000Z","url":"/2021/11/18/C%20sharp%E4%B8%AD%E7%9A%84json/","tags":[["C#","/tags/C/"]],"categories":[["爬虫","/categories/%E7%88%AC%E8%99%AB/"]],"content":" C#中的json数据解析 一、前情提要（准备数据）（1）Json数据原始格式 美化后： 二、准备工作1、使用类库Newtonsoft.Json 2、添加命名空间：using Newtonsoft.Json; 三、使用实体类解析JSON（1）从Http上获取接口返回来的JSON数据 （2）观察JSON数据，设计对应的实体类 也可以利用第三方工具自动生成： 比如说上面这个JSON数据对应的实体类如下： （3）利用JsonConvert方法将Json字符串反序列化，并转换成对应的对象 （4）打印观察结果 四、常用对象（1）JObject：json对象1、创建一个json对象： 解读：创建了一个json对象，字段是 Name，值是 Lucy 2、 一个json对象中嵌套了子对象： 解读：创建一个json对象，有2个字段Name，Company，其中Company是一个对象 3、索引 JObject能够通过中括号[]获取里面的子元素（儿子） （2）JArray：json数组1、创建一个json数组 解读：创建了一个json数组，包括了2个对象：每个对象都有2个字段：Name，Age （3）对象、数组混合使用解读：json对象有2个数组：Student，Study。数组分别有两个对象 （4）对象中的字段值是一个数组 解读：json对象的study字段是一个数组 五、不使用实体类解析JSON（以前情提要数据为例）（1）从Http上获取接口返回来的JSON数据 （2）转换JObject对象 （3）获取data的数据 （4）获取uid和作者 注意有两种方法： （5）获取图片url "},{"title":"Sql Server","date":"2021-11-17T06:09:56.000Z","url":"/2021/11/17/Sql%20Server/","tags":[["sql server","/tags/sql-server/"]],"categories":[["数据库","/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"]],"content":" 基于Sql Server的语法 一、创建数据库 二、数据查询，添加，修改首先创建操作表 （1）数据查询 （2）数据添加方法一 方法二 （3）数据修改 三、连接查询首先创建操作表 插入数据 （1）内连接，连表查询 （2）左连接，以显示主表数据为主 （3）右连接，以显示副表数据为主RIGHT JOIN雷同左连接 四、查询，排序，字符串的拼接查询：略 （1）排序默认升序，asc 降序：desc （2）拼接字符串 注：拼接的前提是拼接的双方类型一致 五、筛选查询，模糊查询首先创建操作表 插入测试数据 （1）Top （2）模糊查询like注意：%可以为空，_替代一个字符 （3）模糊查询in限定在某个范围中，如： 注意里面一定要具体的值，不能与%配合使用 （4）模糊查询between and注意between and为包含关系 六、集合关系A = {1, 2, 3, 4, 5} B = {1, 2, 3, 6} A+B合集：{1, 2, 3, 4, 5, 6} A∪B并集：{1, 2, 3} A-B减集：{4}, {5}, {6} （1）union取合集（自带distinct，去掉重复），union all（不去重复） （2）intersect取交集 （3）except减集 比较两个结果集，将except关键词前的结果集除去交集部分，而形成新的结果集 七、一个练习 八、第二个练习"},{"title":"多线程与异步","date":"2021-11-08T07:28:00.510Z","url":"/2021/11/08/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%BC%82%E6%AD%A5/","tags":[["C#","/tags/C/"]],"categories":[["爬虫","/categories/%E7%88%AC%E8%99%AB/"]],"content":" 基于C#的多线程与异步实现 前情提要前后台线程 一、Thread，线程什么是线程Thread 线程是一个可执行路径，他可以独立于其他线程执行； 每个线程都在操作系统的进程（Process）内执行，而操作系统进程提供了 单线程应用，在进程独立的环境中只跑一个线程的应用 多线程应用，例如：一个线程在后台读取数据，另一个线程在数据到达胡进行展示 这个数据就被称作是共享的状态 有参时： 二、线程开启方式1——异步委托（.NET Framework项目）（1）无参无返回值 （2）有参有返回值 （3）完整代码 异步编程模型(APM)(使用IAsyncResult和BeginInvoke)不再是异步调用的优选方法。从.NET Framework 4.5开始，基于任务的异步模式(TAP)是推荐的异步模型。因此，而且由于异步委托的实现取决于远程处理但.NET Core不存在的功能，BeginInvoke和EndInvoke委托调用不被.NET Core支持。 三、线程开启方式2——Thread类（1） （2）改写Lambda表达式 （3）有参数的方法 （4）可以构造线程类，将需要的传递的数据丢到类里面去 四、线程开启方式3——线程池 线程池中所有线程都是后台线程，并且不可设置为前台线程 五、线程开启方式4——Task任务"},{"title":"C#中的RegexOptions类","date":"2021-11-05T01:35:46.000Z","url":"/2021/11/05/C%20sharp%E4%B8%AD%E7%9A%84RegexOptions%E7%B1%BB/","tags":[["正则表达式","/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"],["C#","/tags/C/"]],"categories":[["爬虫","/categories/%E7%88%AC%E8%99%AB/"]],"content":" 源码记录 RegexOptions枚举"},{"title":"正则表达式","date":"2021-10-28T08:29:32.000Z","url":"/2021/10/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","tags":[["计算机网络","/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"],["协议","/tags/%E5%8D%8F%E8%AE%AE/"]],"categories":[["爬虫","/categories/%E7%88%AC%E8%99%AB/"]],"content":" 正则的基本语法与字符 1、语法正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式 例如： runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。 runoo*b，可以匹配 runob、runoob、runoooooob 等，* 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次，即任意）。 colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。 +：&gt;=1 ?：&lt;=1 *：&gt;=0 2、常用元字符 代码 说明 . 匹配除换行符以外的任意字符。 \\w 匹配字母或数字或下划线或汉字。 \\s 匹配任意的空白符。 \\d 匹配数字。（单个） \\b 匹配单词的开始或结束。 [ck] 匹配包含括号内元素的字符 ^ 匹配行的开始。 $ 匹配行的结束。 \\ 对下一个字符转义。比如$是个特殊的字符。要匹配$的话就得用$ | 分支条件，如：x|y匹配 x 或 y。 一些例子： \\b cd .与* hi, how are you? Lucy \\d 3、普通字符 字符 描述 [ABC] 匹配 […] 中的所有字符，例如[aeiou]匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。 [^ABC] 匹配除了[…]中的所有字符，例如[^aeiou]匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。 [A-Z] [A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。 . 匹配除换行符（\\n、\\r）之外的任何单个字符，相等于 [^\\n\\r]。 [\\s\\S] 匹配所有。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行。 \\w 匹配字母、数字、下划线。等价于 [A-Za-z0-9_] 4、非打印字符 字符 描述 \\cx 匹配由x指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL。 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。注意 Unicode 正则表达式会匹配全角空格符。 \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。 \\t 匹配一个制表符。等价于 \\x09 和 \\cI。 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 5、特殊字符 特殊字符 描述 $ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\\n’ 或 ‘\\r’。要匹配 $ 字符本身，请使用 $。 ( ) 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。 ***** 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。 + 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。 . 匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 . 。 [ 标记一个中括号表达式的开始。要匹配 [，请使用 [。 ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。 \\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\\n’ 匹配换行符。序列 ‘\\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。 ^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。 { 标记限定符表达式的开始。要匹配 {，请使用 {。 | 指明两项之间的一个选择。要匹配 |，请使用 |。 6、限定符 特殊字符 描述 * 匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。 {n,} n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。 {n,m} m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。 "}]