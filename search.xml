<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开始学习MySQL</title>
      <link href="/2020/04/03/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0MySQL/"/>
      <url>/2020/04/03/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0MySQL/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>23种设计模式之单例模式</title>
      <link href="/2020/04/01/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/01/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>参考：</p><blockquote><p><a href="https://how2j.cn/k/class-object/class-object-singleton/349.html#nowhere" target="_blank" rel="noopener">https://how2j.cn/k/class-object/class-object-singleton/349.html#nowhere</a></p><p><a href="https://www.bilibili.com/video/av68172551" target="_blank" rel="noopener">https://www.bilibili.com/video/av68172551</a></p><p><a href="https://blog.csdn.net/baolingye/article/details/101106783" target="_blank" rel="noopener">https://blog.csdn.net/baolingye/article/details/101106783</a></p></blockquote><h2 id="核心作用"><a href="#核心作用" class="headerlink" title="核心作用"></a>核心作用</h2><blockquote><p> 保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</p></blockquote><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>单例模式只生成一个实例，减少系统的性能开销</li><li>单例模式可以在系统设置全局访问点，优化共享资源访问</li></ol><h2 id="常见的五种单例模式实现"><a href="#常见的五种单例模式实现" class="headerlink" title="常见的五种单例模式实现"></a>常见的五种单例模式实现</h2><h3 id="一、饿汉式"><a href="#一、饿汉式" class="headerlink" title="一、饿汉式"></a>一、饿汉式</h3><blockquote><p>特点：线程安全，调用效率<strong>高</strong>，不能延时加载</p><p>缺点：无论这个类有没有被调用到，都会首先加载里面的资源，占用一定的内存空间，如果这个类长时间没有被用到，那么容易会造成<strong>空间浪费</strong>的结果。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    精髓所在*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GiantDragon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有化构造方法使得该类无法在外部通过new 进行实例化</span>    <span class="token keyword">private</span> <span class="token function">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> GiantDragon instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public static 方法，提供给调用者获取第7行定义的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> GiantDragon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    测试，后面相同*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGiantDragon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过new实例化会报错</span><span class="token comment" spellcheck="true">//      GiantDragon g = new GiantDragon();</span>        <span class="token comment" spellcheck="true">//只能通过getInstance得到对象      </span>        GiantDragon g1 <span class="token operator">=</span> GiantDragon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GiantDragon g2 <span class="token operator">=</span> GiantDragon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GiantDragon g3 <span class="token operator">=</span> GiantDragon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//都是同一个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g1<span class="token operator">==</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g1<span class="token operator">==</span>g3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二、懒汉式"><a href="#二、懒汉式" class="headerlink" title="二、懒汉式"></a>二、懒汉式</h3><blockquote><p>懒汉式单例模式与饿汉式单例模式不同，只有在调用这个类的时候，才会创建实例 </p><p>特点：线程安全，调用效率不高，可以延时加载</p><p>缺点：效率较<strong>低</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GiantDragon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有化构造方法使得该类无法在外部通过new 进行实例化</span>    <span class="token keyword">private</span> <span class="token function">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//准备一个类属性，用于指向一个实例化对象，但是暂时不创建内存空间，令其指向null</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> GiantDragon instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public static 方法，返回实例对象        // 若存在并发，可添加synchronized修饰符</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> GiantDragon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">==</span>instance<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回 instance指向的对象</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三、DCL懒汉式（双重检测锁模式）"><a href="#三、DCL懒汉式（双重检测锁模式）" class="headerlink" title="三、DCL懒汉式（双重检测锁模式）"></a>三、DCL懒汉式（双重检测锁模式）</h3><blockquote><p>特点：不需要对整个方法进行同步，缩小了锁的范围，只有第一次会进入创建对象的方法，提高了效率</p><p>缺点：因为不是在类加载时就创建对象，因此存在<strong>线程安全</strong>问题，当第一个线程执行到创建对象的方法时，但还未出方法返回，此时第二个线程进入，发现instance不为空，但第一个线程此时还未出去，可能发送意想不到的安全问题</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GiantDragon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有化构造方法使得该类无法在外部通过new 进行实例化</span>    <span class="token keyword">private</span> <span class="token function">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//准备一个类属性，用于指向一个实例化对象，但是暂时不创建内存空间，令其指向null</span>    <span class="token comment" spellcheck="true">//使用避免指令重排带来的线程安全问题</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> GiantDragon instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public static 方法，返回实例对象</span>    <span class="token comment" spellcheck="true">//，使用同步代码块提高效率</span>    <span class="token comment" spellcheck="true">//现在不需要对整个方法进行同步，缩小了锁的范围，只有第一次会进入创建对象的方法，提高了效率</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> GiantDragon  <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">==</span>instance<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>GiantDragon<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">==</span>instance<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回 instance指向的对象</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="四、静态内部类实现"><a href="#四、静态内部类实现" class="headerlink" title="四、静态内部类实现"></a>四、静态内部类实现</h3><blockquote><p>使用静态内部类解决了线程安全问题，并实现了延时加载</p><p>缺点：反射机制有可能会破坏单例化</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GiantDragon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有化构造方法使得该类无法在外部通过new 进行实例化</span>    <span class="token keyword">private</span> <span class="token function">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//不会在外部类初始化时就直接加载，只有当调用了getInstance方法时才会静态加载，线程安全，final保证了在内存中只有一份</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SingletonDemo4 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonDemo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonDemo4 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> InnerClass<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="五、枚举单例"><a href="#五、枚举单例" class="headerlink" title="五、枚举单例"></a>五、枚举单例</h3><blockquote><p>最推荐使用的单例模式</p><p>特点：线程安全，调用效率高</p><p>缺点：不能延时加载（但是<strong>安全</strong>）</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//枚举方式实现单例模式</span><span class="token keyword">public</span> <span class="token keyword">enum</span> SingletonDemo5 <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonDemo5 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SingletonDemo5Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SingletonDemo5 instance <span class="token operator">=</span> SingletonDemo5<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SingletonDemo5 instance1 <span class="token operator">=</span> SingletonDemo5<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
