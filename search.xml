<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++中的内存区域</title>
      <link href="/2020/04/09/C++%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
      <url>/2020/04/09/C++%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="C-中的内存区域"><a href="#C-中的内存区域" class="headerlink" title="C++中的内存区域"></a>C++中的内存区域</h1><p>C++的内存区域大致分为5个小区域</p><p>分别为</p><ul><li><p>栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。 </p></li><li><p>堆区（heap）— 由程序员负责分配和释放，与数据结构中的堆是两回事</p></li><li><p>全局区（静态区）— 存放全局变量和静态变量。</p><p>初始化的全局变量和静态变量在一块区域， </p><p>未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。</p><ul><li>程序结束后由系统释放。 </li></ul></li><li><p>文字常量区（常量池） — 常量字符串就是放在这里的。 程序结束后由系统释放</p></li><li><p>程序代码区 — 存放函数体的二进制代码。 </p></li></ul><hr><h2 id="堆和栈的申请方式"><a href="#堆和栈的申请方式" class="headerlink" title="堆和栈的申请方式"></a>堆和栈的申请方式</h2><p>栈由系统自动分配，速度较快，在windows下栈是向低地址扩展的数据结构，是一块连续的内存区域，大小是2MB。</p><p>堆需要程序员自己申请，并指明大小，速度比较慢。在C中用malloc，C++中用new。另外，堆是向高地址扩展的数据结构，是不连续的内存区域，堆的大小受限于计算机的虚拟内存。因此堆空间获取和使用比较灵活，可用空间较大。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中jvm的内存区域</title>
      <link href="/2020/04/09/Java%E4%B8%ADjvm%E7%9A%84%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
      <url>/2020/04/09/Java%E4%B8%ADjvm%E7%9A%84%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中jvm的内存区域"><a href="#Java中jvm的内存区域" class="headerlink" title="Java中jvm的内存区域"></a>Java中jvm的内存区域</h1><p>java中的jvm将内存一共分成了四个区域</p><ul><li>栈区（stack segment）</li><li>堆区（heap segment）</li><li>代码区（code segment）</li><li>数据区（data segment）</li></ul><h2 id="一、栈区"><a href="#一、栈区" class="headerlink" title="一、栈区"></a>一、栈区</h2><p>栈中保存<strong>基本数据类型的变量</strong>和<strong>自定义的对象的引用(而不是对象)</strong>，<strong>对象本身</strong>都存放在堆区中，<strong>被执行的方法</strong>的也是pull到栈中，当方法执行完后再push出栈。</p><p>栈区(stack)：由系统的编译器自动的释放，主要用来存放方法中的参数，一些临时的局部变量等，并且方法中的参数一般在操作完后，会由编译器自动的释放掉。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// aa存储在栈区</span>        <span class="token comment" spellcheck="true">// aa指向的内存存放在堆区</span>        A aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="二、堆区"><a href="#二、堆区" class="headerlink" title="二、堆区"></a>二、堆区</h2><p>当new一个对象的时候，这个对象就被存储在了堆区中。</p><p>由程序员决定，在Java中，如果程序员不释放的话，一般会由垃圾回收机制自动的清理掉。此区域主要用来存放我们经常创建的对象、动态的申请的临时空间等。</p><hr><h2 id="三、代码区"><a href="#三、代码区" class="headerlink" title="三、代码区"></a>三、代码区</h2><p>存放程序编译后可以执行代码的地方。比如执行代码时写的While语句、if条件语句、方法等，都会存放到此。</p><hr><h2 id="四、数据区"><a href="#四、数据区" class="headerlink" title="四、数据区"></a>四、数据区</h2><p>也称<strong>全局区</strong>或者<strong>静态区</strong>，根据名称我们就应该知道用来存放一些全局的东西，比如我们经常用到的静态变量、全局变量等都会存放到数据区，此区域上的东西都被全局所共享。比如我们可以采取类名<code>.</code>的方式就可以访问到方法，这就是所谓的静态方法，存放到数据区的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 底层 </tag>
            
            <tag> JavaSe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的匿名内部类</title>
      <link href="/2020/04/08/Java%E4%B8%AD%E7%9A%84%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2020/04/08/Java%E4%B8%AD%E7%9A%84%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的匿名内部类与代码块"><a href="#Java中的匿名内部类与代码块" class="headerlink" title="Java中的匿名内部类与代码块"></a>Java中的匿名内部类与代码块</h1><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>用途：用于初始化类成员属性</p><p>具体使用方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 非静态代码块</span>    <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~执行了非静态代码块~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态代码块</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// age = 10;        // error，静态代码块只能对静态属性进行操作</span>        name <span class="token operator">=</span> <span class="token string">"lorz5"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~执行了静态代码块~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化两次，静态代码块只会初始化一次</span>        Main a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Main b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    输出结果：    > ~执行了静态代码块~    > ~执行了非静态代码块~    > ~执行了非静态代码块~*/</span></code></pre><ul><li>静态代码块只能对静态属性进行操作</li><li>静态代码块只会初始化一次</li><li>静态代码块优先于非静态代码块</li></ul><hr><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>匿名内部类即没有名字的内部类，只能使用一次</p><blockquote><p>前提条件：必须继承一个父类或实现一个接口</p><p>用途：简化代码编写</p></blockquote><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="1、匿名内部类实现抽象方法"><a href="#1、匿名内部类实现抽象方法" class="headerlink" title="1、匿名内部类实现抽象方法"></a>1、匿名内部类实现抽象方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建的匿名内部类为A的子类</span>        A aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 因为没有类名，所以没有构造函数，作为代替，可以使用代码块来初始化</span>                <span class="token keyword">super</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        aa<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    输出结果：    > Hello*/</span></code></pre><h4 id="2、匿名内部类实现接口"><a href="#2、匿名内部类实现接口" class="headerlink" title="2、匿名内部类实现接口"></a>2、匿名内部类实现接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        aa<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    输出结果：    > Hello*/</span></code></pre><h4 id="3、Thread类的匿名内部类实现"><a href="#3、Thread类的匿名内部类实现" class="headerlink" title="3、Thread类的匿名内部类实现"></a>3、Thread类的匿名内部类实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    输出结果：    > 1 2 3 4 5 */</span></code></pre><h4 id="4、Runnable接口的匿名内部类实现"><a href="#4、Runnable接口的匿名内部类实现" class="headerlink" title="4、Runnable接口的匿名内部类实现"></a>4、Runnable接口的匿名内部类实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    输出结果：    > 1 2 3 4 5 */</span></code></pre><hr><ul><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的equals方法</title>
      <link href="/2020/04/08/Java%E4%B8%AD%E7%9A%84equals%E6%96%B9%E6%B3%95/"/>
      <url>/2020/04/08/Java%E4%B8%AD%E7%9A%84equals%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="java中的equals方法小结"><a href="#java中的equals方法小结" class="headerlink" title="java中的equals方法小结"></a>java中的equals方法小结</h1><p>Java中比较两个对象有两种方式</p><h2 id="一、-操作符"><a href="#一、-操作符" class="headerlink" title="一、==操作符"></a>一、==操作符</h2><ul><li>这个用来比较两个对象是否为同一对象</li><li>原理：实质比较的是<strong>变量(栈)内存中存放的对象的(堆)内存地址</strong></li><li>真正意义上的指针操作。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Father a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Father b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false，不是同一对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="二、equals-方法"><a href="#二、equals-方法" class="headerlink" title="二、equals()方法"></a>二、equals()方法</h2><blockquote><p> 涉及到的常识：所有类都继承Object，也就拥有了从Object中得到的equals()方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    底层源码*/</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong>传统</strong>的equals()方法与==操作符作用一样，只能比较是否指向同一对象</li><li><strong><em>特例</em></strong>：当用equals()方法进行比较时，对<strong>File、Date和各种包装类</strong>（Integer、Double、String等等）来说，比较的是类型和内容是否一致而不考虑引用的是否是同一对象（<strong>原因：重写了equals()方法</strong>）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// false，不同的两个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true，两个对象内容相同</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="三、补充小知识"><a href="#三、补充小知识" class="headerlink" title="三、补充小知识"></a>三、补充小知识</h2><ul><li><p>java中的jvm将内存粗略的分成三个区，分别为栈区、堆区和常量池</p></li><li><p>变量存放的内存为栈区，动态分配的内存（new）的则在堆区</p></li><li><p>定义的常量只会存在一个，存放在常量池中</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 在常量池中创建了一个"abc"的对象</span>        String b <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 常量池中已存在同样的为“abc”的对象，直接将其赋给当前引用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// true，同一个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true，两个对象内容相同</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>另外，==比较运算比使用equals()方法快</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用doc命令</title>
      <link href="/2020/04/07/%E5%B8%B8%E7%94%A8doc%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/07/%E5%B8%B8%E7%94%A8doc%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的doc命令"><a href="#常用的doc命令" class="headerlink" title="常用的doc命令"></a>常用的doc命令</h1><p><code>dir</code>：列出当前目录下的文件以及文件夹</p><p><code>md</code>：创建一个文件夹</p><p><code>rd</code>：删除一个文件夹</p><p><code>cd</code>：进入指定目录</p><p><code>cd..</code>：返回上一级目录</p><p><code>cd\</code>：退回到根目录</p><p><code>del</code>：删除文件</p><p><code>exit</code>：退出doc命令行</p>]]></content>
      
      
      
        <tags>
            
            <tag> doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始学习MySQL</title>
      <link href="/2020/04/03/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0MySQL/"/>
      <url>/2020/04/03/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="一、从安装开始"><a href="#一、从安装开始" class="headerlink" title="一、从安装开始"></a>一、从安装开始</h2><blockquote><p>安装地址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a> </p></blockquote><p>1、挑选合适的版本安装（建议以压缩包的形式）</p><p><img src=".._data%5Cblog_imgs%5CMySQL_installer01.jpg" alt="" loading="lazy"></p><p>2、建议放在电脑的环境配置下</p><p><img src=".._data%5Cblog_imgs%5CMySQL_installer02.png" alt="" loading="lazy"></p><p>3、配置环境变量</p><p><code>我的电脑 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; Path路径 -&gt; 编辑，添加bin目录</code></p><p><img src=".._data%5Cblog_imgs%5CMySQL_installer03.jpg" alt="" loading="lazy"></p><p>4、新建mysql配置文件</p><p><img src=".._data%5Cblog_imgs%5CMySQL_installer04.png" alt="" loading="lazy"></p><pre class=" language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span><span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\Environment\mysql-8.0.19\</span><span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\Environment\mysql-8.0.19\data\</span><span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3306    #端口</span>skip-grant-tables    #跳过密码验证</code></pre><p>5、启动管理员模式下的CMD，切换到mysql下的bin目录，输入mysqld -install （安装mysql）</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23种设计模式之单例模式</title>
      <link href="/2020/04/01/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/01/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>参考：</p><blockquote><p><a href="https://how2j.cn/k/class-object/class-object-singleton/349.html#nowhere" target="_blank" rel="noopener">https://how2j.cn/k/class-object/class-object-singleton/349.html#nowhere</a></p><p><a href="https://www.bilibili.com/video/av68172551" target="_blank" rel="noopener">https://www.bilibili.com/video/av68172551</a></p><p><a href="https://blog.csdn.net/baolingye/article/details/101106783" target="_blank" rel="noopener">https://blog.csdn.net/baolingye/article/details/101106783</a></p></blockquote><h2 id="核心作用"><a href="#核心作用" class="headerlink" title="核心作用"></a>核心作用</h2><blockquote><p> 保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</p></blockquote><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>单例模式只生成一个实例，减少系统的性能开销</li><li>单例模式可以在系统设置全局访问点，优化共享资源访问</li></ol><h2 id="常见的五种单例模式实现"><a href="#常见的五种单例模式实现" class="headerlink" title="常见的五种单例模式实现"></a>常见的五种单例模式实现</h2><h3 id="一、饿汉式"><a href="#一、饿汉式" class="headerlink" title="一、饿汉式"></a>一、饿汉式</h3><blockquote><p>特点：线程安全，调用效率<strong>高</strong>，不能延时加载</p><p>缺点：无论这个类有没有被调用到，都会首先加载里面的资源，占用一定的内存空间，如果这个类长时间没有被用到，那么容易会造成<strong>空间浪费</strong>的结果。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    精髓所在*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GiantDragon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有化构造方法使得该类无法在外部通过new 进行实例化</span>    <span class="token keyword">private</span> <span class="token function">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> GiantDragon instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public static 方法，提供给调用者获取第7行定义的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> GiantDragon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    测试，后面相同*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGiantDragon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过new实例化会报错</span><span class="token comment" spellcheck="true">//      GiantDragon g = new GiantDragon();</span>        <span class="token comment" spellcheck="true">//只能通过getInstance得到对象      </span>        GiantDragon g1 <span class="token operator">=</span> GiantDragon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GiantDragon g2 <span class="token operator">=</span> GiantDragon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GiantDragon g3 <span class="token operator">=</span> GiantDragon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//都是同一个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g1<span class="token operator">==</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g1<span class="token operator">==</span>g3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二、懒汉式"><a href="#二、懒汉式" class="headerlink" title="二、懒汉式"></a>二、懒汉式</h3><blockquote><p>懒汉式单例模式与饿汉式单例模式不同，只有在调用这个类的时候，才会创建实例 </p><p>特点：线程安全，调用效率不高，可以延时加载</p><p>缺点：效率较<strong>低</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GiantDragon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有化构造方法使得该类无法在外部通过new 进行实例化</span>    <span class="token keyword">private</span> <span class="token function">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//准备一个类属性，用于指向一个实例化对象，但是暂时不创建内存空间，令其指向null</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> GiantDragon instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public static 方法，返回实例对象        // 若存在并发，可添加synchronized修饰符</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> GiantDragon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">==</span>instance<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回 instance指向的对象</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三、DCL懒汉式（双重检测锁模式）"><a href="#三、DCL懒汉式（双重检测锁模式）" class="headerlink" title="三、DCL懒汉式（双重检测锁模式）"></a>三、DCL懒汉式（双重检测锁模式）</h3><blockquote><p>特点：不需要对整个方法进行同步，缩小了锁的范围，只有第一次会进入创建对象的方法，提高了效率</p><p>缺点：因为不是在类加载时就创建对象，因此存在<strong>线程安全</strong>问题，当第一个线程执行到创建对象的方法时，但还未出方法返回，此时第二个线程进入，发现instance不为空，但第一个线程此时还未出去，可能发送意想不到的安全问题</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GiantDragon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有化构造方法使得该类无法在外部通过new 进行实例化</span>    <span class="token keyword">private</span> <span class="token function">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//准备一个类属性，用于指向一个实例化对象，但是暂时不创建内存空间，令其指向null</span>    <span class="token comment" spellcheck="true">//使用避免指令重排带来的线程安全问题</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> GiantDragon instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public static 方法，返回实例对象</span>    <span class="token comment" spellcheck="true">//，使用同步代码块提高效率</span>    <span class="token comment" spellcheck="true">//现在不需要对整个方法进行同步，缩小了锁的范围，只有第一次会进入创建对象的方法，提高了效率</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> GiantDragon  <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">==</span>instance<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>GiantDragon<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">==</span>instance<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回 instance指向的对象</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="四、静态内部类实现"><a href="#四、静态内部类实现" class="headerlink" title="四、静态内部类实现"></a>四、静态内部类实现</h3><blockquote><p>使用静态内部类解决了线程安全问题，并实现了延时加载</p><p>缺点：反射机制有可能会破坏单例化</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GiantDragon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有化构造方法使得该类无法在外部通过new 进行实例化</span>    <span class="token keyword">private</span> <span class="token function">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//不会在外部类初始化时就直接加载，只有当调用了getInstance方法时才会静态加载，线程安全，final保证了在内存中只有一份</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SingletonDemo4 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonDemo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonDemo4 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> InnerClass<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="五、枚举单例"><a href="#五、枚举单例" class="headerlink" title="五、枚举单例"></a>五、枚举单例</h3><blockquote><p>最推荐使用的单例模式</p><p>特点：线程安全，调用效率高</p><p>缺点：不能延时加载（但是<strong>安全</strong>）</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//枚举方式实现单例模式</span><span class="token keyword">public</span> <span class="token keyword">enum</span> SingletonDemo5 <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonDemo5 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SingletonDemo5Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SingletonDemo5 instance <span class="token operator">=</span> SingletonDemo5<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SingletonDemo5 instance1 <span class="token operator">=</span> SingletonDemo5<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的泛型</title>
      <link href="/2020/03/12/Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/"/>
      <url>/2020/03/12/Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的泛型"><a href="#Java中的泛型" class="headerlink" title="Java中的泛型"></a>Java中的泛型</h1><p>泛型是一种参数化类型的机制。它可以使得代码适用于各种类型，从而编写更加通用的代码，例如集合框架。</p><p>泛型是一种编译时类型确认机制。它提供了编译期的<strong>类型安全</strong>，确保在泛型类型（通常为泛型集合）上只能使用正确类型的对象，避免了在运行时出现ClassCastException（类型转换错误异常）</p><p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数</p><h2 id="一、使用泛型与不使用泛型的集合的区别"><a href="#一、使用泛型与不使用泛型的集合的区别" class="headerlink" title="一、使用泛型与不使用泛型的集合的区别"></a>一、使用泛型与不使用泛型的集合的区别</h2><h3 id="1、不使用泛型的集合"><a href="#1、不使用泛型的集合" class="headerlink" title="1、不使用泛型的集合"></a>1、不使用泛型的集合</h3><p>优点：集合不使用泛型，默认是Object类型，可以存储任何类型的元素</p><p>缺点：不安全，会引发异常</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">leeCode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可以往集合里添加任意类型的元素</span>        e<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 因为无法确定集合里的对象类型，所以使用每个对象独有的方法</span>        <span class="token comment" spellcheck="true">// 会抛出异常</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object k <span class="token operator">:</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String s <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>k<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、使用泛型的集合"><a href="#2、使用泛型的集合" class="headerlink" title="2、使用泛型的集合"></a>2、使用泛型的集合</h3><p>优点：避免了类型转换的麻烦，存取元素类型一致</p><p>缺点：指定了什么类型，就只能是什么类型，无法存入其他元素</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">leeCode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用泛型指定了集合存储的类型为String</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"字符串1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// e.add(1);    error：只能存储字符串</span>        e<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"字符串2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String k <span class="token operator">:</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="二、泛型的定义跟使用"><a href="#二、泛型的定义跟使用" class="headerlink" title="二、泛型的定义跟使用"></a>二、泛型的定义跟使用</h2><p>作用：简单来说就是使一个类或者方法具有兼容性，可以根据我们需要的数据类型对某一种数据类型进行操作</p><h3 id="1、定义和使用带有泛型的类"><a href="#1、定义和使用带有泛型的类" class="headerlink" title="1、定义和使用带有泛型的类"></a>1、定义和使用带有泛型的类</h3><p>格式：</p><blockquote><p>修饰符 class 类名&lt;泛型变量&gt; {    }</p></blockquote><p>Ex：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    API中的ArrayList集合*/</span><span class="token comment" spellcheck="true">// E 代表一个未知的数据类型</span><span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 方法体</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>什么时候确定泛型？</li></ul><blockquote><p>创建对象的时候确认泛型的类型</p></blockquote><h3 id="2、定义和使用带有泛型的方法"><a href="#2、定义和使用带有泛型的方法" class="headerlink" title="2、定义和使用带有泛型的方法"></a>2、定义和使用带有泛型的方法</h3><p>格式：</p><blockquote><p>修饰符 &lt;泛型变量&gt; 返回值类型 方法名称 (参数){    }</p></blockquote><p>Ex:</p><pre class=" language-JAVA"><code class="language-JAVA">public class GenericMethodTest{   // 泛型方法 printArray    // 一个方法实现对多种数据类型的数据输出的功能，具备了一定的兼容性   public static < E > void printArray( E[] inputArray )   {      // 输出数组元素                     for ( E element : inputArray ){                    System.out.printf( "%s ", element );         }         System.out.println();    }    public static void main( String args[] )    {        // 创建不同类型数组： Integer, Double 和 Character        Integer[] intArray = { 1, 2, 3, 4, 5 };        Double[] doubleArray = { 1.1, 2.2, 3.3, 4.4 };        Character[] charArray = { 'H', 'E', 'L', 'L', 'O' };        System.out.println( "整型数组元素为:" );        printArray( intArray  ); // 传递一个整型数组        System.out.println( "\n双精度型数组元素为:" );        printArray( doubleArray ); // 传递一个双精度型数组        System.out.println( "\n字符型数组元素为:" );        printArray( charArray ); // 传递一个字符型数组    } }</code></pre><ul><li>什么时候确定泛型？</li></ul><p>调用方法的时候确认泛型的类型</p><h3 id="3、定义和使用带有泛型的接口"><a href="#3、定义和使用带有泛型的接口" class="headerlink" title="3、定义和使用带有泛型的接口"></a>3、定义和使用带有泛型的接口</h3><blockquote><p><a href="https://blog.csdn.net/Architect_chaser/article/details/101627284" target="_blank" rel="noopener">定义和使用含有泛型的类、接口、泛型通配符————————墨白</a></p></blockquote><p>因为（继承）实现接口的时候对于泛型有两种情况，所以单独拿出来讨论。</p><p>当接口定义了泛型的时候，可以<br>     1.实现（继承）时，保留接口（父类）的,这样相当于实现类（子类）也使用了泛型，在创建对象的时候确定泛型的数据类型。<br>     2.实现（继承）时，直接把接口（父类）的写成想要实现的数据类型。</p><p>1、接口使用泛型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterFace</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> E <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> E <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> E <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、实现时指定<E>是什么数据类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImple</span> <span class="token keyword">implements</span> <span class="token class-name">MyInterFace</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fun1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fun2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fun3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>或者实现类依旧带泛型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImple</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">MyInterFace</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  E <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fun1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  E <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fun2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  E <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fun3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="三、泛型通配符"><a href="#三、泛型通配符" class="headerlink" title="三、泛型通配符"></a>三、泛型通配符</h2><ul><li>类型通配符一般是使用 <strong><em>?</em> *<em>代替具体的类型参数。例如 *</em>List</strong> 在逻辑上是<strong>List<String></strong>，List<Integer>** 等所有List&lt;具体类型实参&gt;的父类。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Number<span class="token operator">></span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"icon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        number<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getData</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getData</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getData</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 因为getData()方法的参数是List类型的，所以name，age，number都可以作为这个方法的实参，这就是通配符的作用 </span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data :"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>类型通配符上限通过形如List来定义，如此定义就是通配符泛型值接受Number及其下层子类类型。  </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Number<span class="token operator">></span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"icon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        number<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1报错，因为getUperNumber()方法中的参数已经限定了参数泛型上限为Number，所以泛型为String是不在这个范围之内，所以会报错 </span>        <span class="token comment" spellcheck="true">//getUperNumber(name);//1</span>        <span class="token function">getUperNumber</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>        <span class="token function">getUperNumber</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data :"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getUperNumber</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data :"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>类型通配符下限通过形如 <strong>List</strong>来定义，表示类型只能接受Number及其三层父类类型，如 Object 类型的实例。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSe </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
